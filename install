#!/usr/bin/python

##
#
#    Copyright (C) 2013 Jessica Tallon & Matthew Molyneaux
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

import sys, os, subprocess

# try and impot django stuff 
try:
    from django.utils.crypto import get_random_string
except ImportError:
    pass # it'll be cought further down.

def test_django_install():
    """ checks to see if django is installed by trying to import """
    try:
        from django import get_version
        if float(get_version) > 1.5:
            return (True, "")
        else:
            return (False, "You need version 1.5 or higher, you currently have django %s" % get_version())
               
    except ImportError:
        return (False, "You need to install django 1.5 or higher.")

def generate_key():
    """ 
    Generates a random key for the SECRET_KEY field
    This is taken from: 
    https://github.com/django/django/blob/master/django/core/management/commands/startproject.py#L28
    """
    chars = "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)"
    key = get_random_string(50, chars)
    return key

def current_file():
    """ Returns base path of front repo """
    return os.path.realpath(__file__)

if __name__ == "__main__":
    django_test = test_django_install()
    if not django_test[0]:
        print django_test[1]
        sys.exit()
    
    app_name = raw_input("Name of instance: ")
    
    if app_name.lower() == "inboxen":
        print "You cannot use the name inboxen."
        sys.exit()
    
    database_method = raw_input("Database (sqlite, mysql, postgres or oracle): ").lower()
    
    if database_method not in ["sqlite", "sqlite3", "mysql", "postgres", "oracle"]:
        print "Unknown database: %s" % database_method
        print "It must be one of sqlite, mysql, postgres or oracle"
        sys.exit()
    
    # now database specific
    if database_method in ["sqlite3", "sqlite"]:
        name = raw_input("Path or File name for database: ")
        username, password, host, port = False, False, False, False
    else:
        name = raw_input("Database name: ")
        username = raw_input("Username: ")
        password = raw_input("Password: ")
        host = raw_input("Host: (defaults to localhost): ")
        port = False
        while not port:
            try:
                port = int(raw_input("Port: (set to %s's default): " % database_method).rstrip(" "))
            except ValueError:
                print "You need to input a numeric value for a port"
            except Exception:
                print "Please report this to the inboxen github"
                raise
